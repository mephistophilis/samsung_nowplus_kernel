diff --git a/modules/dpram2/dpram.c b/modules/dpram2/dpram.c
index 93f4e1f..58557e9 100644
--- a/modules/dpram2/dpram.c
+++ b/modules/dpram2/dpram.c
@@ -1,10 +1,9 @@
 
 #define _DEBUG
 #define _ENABLE_ERROR_DEVICE
-//#define _DPRAM_DEBUG_HEXDUMP
+#define _DPRAM_DEBUG_HEXDUMP
 
 #define _HSDPA_DPRAM
-
 #include <linux/module.h>
 #include <linux/moduleparam.h>
 #include <linux/init.h>
@@ -46,11 +45,16 @@
 
 #include "dpram.h"
 
+
+#define SMS_FIX     // enable workaround for SMS multiple receive bug
+
+
 #define DRIVER_ID			"[DPRAM] dpram driver is loaded."
 #define DRIVER_NAME 		"DPRAM"
 #define DRIVER_PROC_ENTRY	"driver/dpram"
 #define DRIVER_MAJOR_NUM	255
 
+
 #ifdef CONFIG_EVENT_LOGGING
 #define DPRAM_ID			3
 #define DPRAM_READ			3
@@ -87,13 +91,6 @@
 #define GPIO_LEVEL_LOW				0
 #define GPIO_LEVEL_HIGH				1
 
-#define OMAP3430_GPIO_ALARM_AP 14
-#define OMAP3430_GPIO_nDPRAM_INT	15
-#define DPRAM_PDA_ACTIVE_GPIO	111
-#define OMAP3430_GPIO_FONE_ON	140
-#define OMAP3430_GPIO_PHONE_ACTIVE18	154
-#define OMAP3430_GPIO_nMSM_RST	178
-
 
 static void __iomem *dpram_base = 0;
 
@@ -181,6 +178,188 @@ static DECLARE_MUTEX(write_mutex);
 
 struct wake_lock dpram_wake_lock;
 
+
+#ifdef SMS_FIX
+
+#define SMS_BUFFER_MAXLEN  16 // only need to parse header
+#define SMS_BUFFER_APPEND  1
+
+// from ius libsamsung-ipc
+#define FRAME_START	0x7f
+#define FRAME_END	0x7e
+
+#define IPC_TYPE_EXEC		                        0x01
+
+#define IPC_COMMAND(f)  ((f->group << 8) | f->index)
+#define FRAME_GRP(m)	(m >> 8)
+#define FRAME_IDX(m)	(m & 0xff)
+
+#define IPC_SMS_INCOMING_MSG            0x0402
+#define IPC_SMS_DELIVER_REPORT		    0x0406
+
+#define IPC_SMS_ACK_NO_ERROR            0x0000
+#define IPC_SMS_ACK_PDA_FULL_ERROR      0x8080
+#define IPC_SMS_ACK_MALFORMED_REQ_ERROR 0x8061
+#define IPC_SMS_ACK_UNSPEC_ERROR        0x806F
+
+
+struct ipc_header {
+    unsigned short length;
+    unsigned char mseq, aseq;
+    unsigned char group, index, type;
+} __attribute__((__packed__));
+
+struct hdlc_header {
+	unsigned short length;
+	unsigned char unknown;
+	struct ipc_header ipc;
+} __attribute__((__packed__));
+
+struct ipc_sms_incoming_msg {
+    unsigned char type, unk, length;
+} __attribute__((__packed__));
+
+
+static unsigned char sms_buffer[SMS_BUFFER_MAXLEN+1];
+static int sms_buffer_len=0;
+
+int smsfix_enable = 1;
+
+static void hexdump(const char *buf, int len);
+static int dpram_write(dpram_device_t *device,	const unsigned char *buf, int len);
+
+void sms_ack_send(dpram_device_t *device)
+{
+    // sms ack data
+     unsigned char sms_ack_data[] = { 0x00, 0x00, 0x03, 0x00, 0x02 };
+     unsigned char frame[300];  //~247+12
+    //ipc_send(IPC_SMS_DELIVER_REPORT, IPC_TYPE_EXEC, data, sizeof(data), 0, device);
+/* 
+size:
+start+end:  2
+hdlc:       3    
+ipc         7
+          -> 12 bytes total       
+*/  
+    const int data_length=247;
+
+	struct hdlc_header header;
+	unsigned int hdr_len = sizeof(header);
+	unsigned int frame_length = (hdr_len + data_length);
+	//char *frame = malloc(frame_length);
+
+    memset(&frame, 0, sizeof(frame));
+
+    // build hdlc+ipc header
+	memset(&header, 0x00, hdr_len);
+	header.length = frame_length;
+	header.ipc.mseq = 0; //fixme
+	header.ipc.aseq = 0xff; //fixme
+	header.ipc.length = (frame_length - 3);
+	header.ipc.group = FRAME_GRP(IPC_SMS_DELIVER_REPORT);
+	header.ipc.index = FRAME_IDX(IPC_SMS_DELIVER_REPORT);
+	header.ipc.type = IPC_TYPE_EXEC;
+
+	memcpy(frame+1, &header, sizeof(header));
+	memcpy(frame+hdr_len+1, sms_ack_data, sizeof(sms_ack_data));
+    
+    frame[0] = FRAME_START;
+    frame[frame_length+1] = FRAME_END;
+#ifdef _DPRAM_DEBUG_HEXDUMP    
+    printk("[DPRAM] SMSFIX: >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n");
+    hexdump(frame, frame_length+2);
+    printk("[DPRAM] <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");
+#endif    
+	dpram_write(device, frame, frame_length+2); //+2bytes start/end
+
+}
+
+
+int sms_fix_add_data(unsigned char* buffer, int len, int append)
+{
+    printk("[DPRAM] %s\n", __func__);      
+    if(!append)
+    {
+        sms_buffer_len = 0; 
+        
+        if (len < SMS_BUFFER_MAXLEN)
+        {
+            memcpy(sms_buffer, buffer, len);
+            sms_buffer_len = len;    
+        }
+        else
+        {
+            memcpy(sms_buffer, buffer, SMS_BUFFER_MAXLEN);
+            sms_buffer_len = SMS_BUFFER_MAXLEN;    
+        } 
+    }
+    else
+    {
+         if (len+sms_buffer_len < SMS_BUFFER_MAXLEN)
+        {
+            memcpy(sms_buffer+sms_buffer_len, buffer, len);
+            sms_buffer_len += len;    
+        }
+        else
+        {
+            memcpy(sms_buffer+sms_buffer_len, buffer, SMS_BUFFER_MAXLEN-sms_buffer_len);
+            sms_buffer_len = SMS_BUFFER_MAXLEN;    
+        } 
+    }
+    return sms_buffer_len;
+
+}
+// 1 byte frame start
+// --- hdlc header ---
+// 2 bytes  length
+// 1 byte   ?
+// --- ipc_header ----
+int sms_fix_process(dpram_device_t *device)
+{
+    unsigned char *buffer = sms_buffer;
+    int len = sms_buffer_len;
+    unsigned short *p_len;
+    struct ipc_header* ipc;
+    unsigned char *data;
+
+printk("[DPRAM] %s\n", __func__);    
+
+    // only process header
+    if ((*buffer == FRAME_START) && (len >= sizeof(struct hdlc_header)))
+    {
+        p_len = (unsigned short*)&buffer[1];
+        data = &buffer[4];
+        ipc = (struct ipc_header*)data;
+ 
+        printk("[DPRAM] SMSFIX: frame start detected, frame length=%d\n", *p_len);  
+        printk("        mseq  = 0x%02x\n"
+               "        aseq  = 0x%02x\n"
+               "        group = 0x%02x\n"
+               "        index = 0x%02x\n"
+               "        type  = 0x%02x\n"
+               "        length= 0x%02x\n",
+            ipc->mseq, ipc->aseq, ipc->group, ipc->index, ipc->type, ipc->length);  
+        
+        //hack: samsung ril implementation lacks SMS acknowledge (maybe done by baseband itself?)
+        //so send SMS acknowledge from here direct after INCOMING SMS
+        if(IPC_COMMAND(ipc) == IPC_SMS_INCOMING_MSG)
+        {
+            printk("[DPRAM] SMSFIX: incoming SMS, send ACK\n");  
+            // send ACK to baseband
+            sms_ack_send(device);
+
+            // struct ipc_sms_incoming_msg *info = (struct ipc_sms_incoming_msg*)ipc->data;
+            // unsigned char *pdu = ((unsigned char*)ipc->data+sizeof(struct ipc_sms_incoming_msg));
+        }
+    }
+    
+    return 0;
+}
+
+#endif
+
+
+
 #ifdef CONFIG_EVENT_LOGGING
 static inline EVENT_HEADER *getPayloadHeader(int flag, int size)
 {
@@ -488,6 +667,8 @@ static int dpram_read(dpram_device_t *device, const u16 non_cmd)
 {
 	int retval = 0;
 	int size = 0;
+    unsigned char *p_data;
+    int data_size;
 
 	u16 head, tail, up_tail;
 
@@ -509,10 +690,17 @@ static int dpram_read(dpram_device_t *device, const u16 non_cmd)
 			
 		    if (retval != size)
 			dprintk("Size Mismatch : Real Size = %d, Returned Size = %d\n", size, retval);
-			
+		    
+            p_data = (unsigned char *)(DPRAM_VBASE + (device->in_buff_addr + tail));
+            data_size = size;	
 #ifdef _DPRAM_DEBUG_HEXDUMP
-			hexdump((unsigned char *)(DPRAM_VBASE + (device->in_buff_addr + tail)), size);
+			hexdump(p_data, data_size);  
+  
 #endif
+#ifdef SMS_FIX 
+            if(smsfix_enable)  
+                sms_fix_add_data(p_data, data_size, 0);
+#endif     
 		}
 		else {
 			int tmp_size = 0;
@@ -525,24 +713,36 @@ static int dpram_read(dpram_device_t *device, const u16 non_cmd)
 			if (retval != tmp_size)
 				dprintk("Size Mismatch : Real Size = %d, Returned Size = %d\n", tmp_size, retval);
 				
-			
+			p_data = (unsigned char *)(DPRAM_VBASE + (device->in_buff_addr + tail));
+            data_size = tmp_size;
 #ifdef _DPRAM_DEBUG_HEXDUMP
-			hexdump((unsigned char *)(DPRAM_VBASE + (device->in_buff_addr + tail)), tmp_size);
+			hexdump(p_data, data_size);   
 #endif
+#ifdef SMS_FIX  
+            if(smsfix_enable)   
+                sms_fix_add_data(p_data, data_size, 0);
+#endif     
 
 			if (size > tmp_size) {
 				dpram_tty_insert_data(device, (unsigned char *)(DPRAM_VBASE + device->in_buff_addr), size - tmp_size);
 				
+                p_data = (unsigned char *)(DPRAM_VBASE + device->in_buff_addr);
+                data_size = size - tmp_size;
 #ifdef _DPRAM_DEBUG_HEXDUMP
-				hexdump((unsigned char *)(DPRAM_VBASE + device->in_buff_addr), size - tmp_size);
+                hexdump(p_data, data_size);   
 #endif
+#ifdef SMS_FIX     
+                if(smsfix_enable)
+                    sms_fix_add_data(p_data, data_size, SMS_BUFFER_APPEND);
+#endif     
 				retval += (size - tmp_size);
 			}
 
 		}
 
-		up_tail = (u16)((tail + retval) % device->in_buff_size);
+        up_tail = (u16)((tail + retval) % device->in_buff_size);
 		WRITE_TO_DPRAM_VERIFY(device->in_tail_addr, &up_tail, sizeof(up_tail));
+        
 	}
 
 #ifdef _DPRAM_DEBUG_HEXDUMP
@@ -557,7 +757,9 @@ static int dpram_read(dpram_device_t *device, const u16 non_cmd)
 #ifdef CONFIG_EVENT_LOGGING
 	dpram_event_logging(DPRAM_READ, (void *)&tail, size);
 #endif
-
+    if(smsfix_enable)  
+        sms_fix_process(device);  
+           
 	return retval;
 }
 
@@ -637,41 +839,41 @@ static void dpram_drop_data(dpram_device_t *device)
 static void dpram_phone_power_on(void)
 {
 	printk("[OneDram] phone power on.\n");
-	int pin_active = gpio_get_value(OMAP3430_GPIO_PHONE_ACTIVE18);
+	int pin_active = gpio_get_value(OMAP_GPIO_PHONE_ACTIVE);
 	
 	printk(KERN_ERR "[DPRAM] phone power on is called.\n");
 
 	switch (pin_active) {
 		case GPIO_LEVEL_LOW:
 		    printk(KERN_ERR "[DPRAM] phone power on GPIO_LEVEL_LOW\n");
-			gpio_set_value(OMAP3430_GPIO_nMSM_RST, GPIO_LEVEL_HIGH);
+			gpio_set_value(OMAP_GPIO_MSM_RST18_N, GPIO_LEVEL_HIGH);
 	
-			gpio_set_value(OMAP3430_GPIO_FONE_ON, GPIO_LEVEL_LOW);
+			gpio_set_value(OMAP_GPIO_FONE_ON, GPIO_LEVEL_LOW);
 			interruptible_sleep_on_timeout(&phone_power_wait, 50);
-			gpio_set_value(OMAP3430_GPIO_FONE_ON, GPIO_LEVEL_HIGH);
+			gpio_set_value(OMAP_GPIO_FONE_ON, GPIO_LEVEL_HIGH);
 			interruptible_sleep_on_timeout(&phone_power_wait, 50);
-			gpio_set_value(OMAP3430_GPIO_FONE_ON, GPIO_LEVEL_LOW);
+			gpio_set_value(OMAP_GPIO_FONE_ON, GPIO_LEVEL_LOW);
 			break;
 
 		case GPIO_LEVEL_HIGH:
 		    printk(KERN_ERR "[DPRAM] phone power on GPIO_LEVEL_HIGH\n");
-			gpio_set_value(OMAP3430_GPIO_nMSM_RST, GPIO_LEVEL_LOW);
+			gpio_set_value(OMAP_GPIO_MSM_RST18_N, GPIO_LEVEL_LOW);
 
-			gpio_set_value(OMAP3430_GPIO_FONE_ON, GPIO_LEVEL_HIGH);
+			gpio_set_value(OMAP_GPIO_FONE_ON, GPIO_LEVEL_HIGH);
 			interruptible_sleep_on_timeout(&phone_power_wait, 50);
-			gpio_set_value(OMAP3430_GPIO_FONE_ON, GPIO_LEVEL_LOW);
+			gpio_set_value(OMAP_GPIO_FONE_ON, GPIO_LEVEL_LOW);
 			interruptible_sleep_on_timeout(&phone_power_wait, 50);
-			gpio_set_value(OMAP3430_GPIO_FONE_ON, GPIO_LEVEL_HIGH);
+			gpio_set_value(OMAP_GPIO_FONE_ON, GPIO_LEVEL_HIGH);
 
 			interruptible_sleep_on_timeout(&phone_power_wait, 50);
 
-			gpio_set_value(OMAP3430_GPIO_nMSM_RST, GPIO_LEVEL_HIGH);
+			gpio_set_value(OMAP_GPIO_MSM_RST18_N, GPIO_LEVEL_HIGH);
 
-			gpio_set_value(OMAP3430_GPIO_FONE_ON, GPIO_LEVEL_LOW);
+			gpio_set_value(OMAP_GPIO_FONE_ON, GPIO_LEVEL_LOW);
 			interruptible_sleep_on_timeout(&phone_power_wait, 50);
-			gpio_set_value(OMAP3430_GPIO_FONE_ON, GPIO_LEVEL_HIGH);
+			gpio_set_value(OMAP_GPIO_FONE_ON, GPIO_LEVEL_HIGH);
 			interruptible_sleep_on_timeout(&phone_power_wait, 50);
-			gpio_set_value(OMAP3430_GPIO_FONE_ON, GPIO_LEVEL_LOW);
+			gpio_set_value(OMAP_GPIO_FONE_ON, GPIO_LEVEL_LOW);
 			break;
 	}
 
@@ -693,14 +895,14 @@ static void dpram_phone_power_off(void)
 
 static int dpram_phone_getstatus(void)
 {
-	return gpio_get_value(OMAP3430_GPIO_PHONE_ACTIVE18);
+	return gpio_get_value(OMAP_GPIO_PHONE_ACTIVE);
 }
 
 static void dpram_phone_reset(void)
 {
-	gpio_set_value(OMAP3430_GPIO_nMSM_RST, 0);
+	gpio_set_value(OMAP_GPIO_MSM_RST18_N, 0);
 	interruptible_sleep_on_timeout(&phone_power_wait, 50);
-	gpio_set_value(OMAP3430_GPIO_nMSM_RST, 1);
+	gpio_set_value(OMAP_GPIO_MSM_RST18_N, 1);
 }
 
 static void dpram_phone_ramdump(void)
@@ -724,6 +926,7 @@ static void dpram_mem_rw(struct _mem_param *param)
 }
 
 #ifdef CONFIG_PROC_FS
+
 static int dpram_read_proc(char *page, char **start, off_t off,
 		int count, int *eof, void *data)
 {
@@ -810,7 +1013,7 @@ static int dpram_read_proc(char *page, char **start, off_t off,
 #endif
 
 			(dpram_phone_getstatus() ? "ACTIVE" : "INACTIVE"),
-			gpio_get_value(OMAP3430_GPIO_nDPRAM_INT),
+			gpio_get_value(OMAP_GPIO_INT_ONEDRAM_AP),
 			forced_dpram_wakeup,
 			silent_reset_bit	
 		);
@@ -1262,7 +1465,7 @@ void check_int_pin_level(void)
 	while (cnt++ < 3) {
 		READ_FROM_DPRAM(&mask, DPRAM_PHONE2PDA_INTERRUPT_ADDRESS, sizeof(mask));
 
-		if (!gpio_get_value(OMAP3430_GPIO_nDPRAM_INT))
+		if (!gpio_get_value(OMAP_GPIO_INT_ONEDRAM_AP))
 			break;
 	}
 }
@@ -1321,13 +1524,13 @@ static void phone_error_off_message_handler(int status)
 #if 1	
 
 	if(1){
-		printk(KERN_INFO"[DPRAM] alarm boot pin status : %d\n", gpio_get_value(OMAP3430_GPIO_ALARM_AP));
-		if(status==MESG_PHONE_OFF && !gpio_get_value(OMAP3430_GPIO_ALARM_AP))
+		printk(KERN_INFO"[DPRAM] alarm boot pin status : %d\n", gpio_get_value(OMAP_GPIO_AP_ALARM));
+		if(status==MESG_PHONE_OFF && !gpio_get_value(OMAP_GPIO_AP_ALARM))
 		{
 			printk(KERN_INFO"[DPRAM] Keep Low Modem.\n");
 			phone_shutdown = 1;
-			gpio_set_value(OMAP3430_GPIO_FONE_ON, GPIO_LEVEL_LOW);
-			gpio_set_value(OMAP3430_GPIO_nMSM_RST, GPIO_LEVEL_LOW);
+			gpio_set_value(OMAP_GPIO_FONE_ON, GPIO_LEVEL_LOW);
+			gpio_set_value(OMAP_GPIO_MSM_RST18_N, GPIO_LEVEL_LOW);
 		}
 	}
 
@@ -1348,7 +1551,7 @@ int curr_phone_state=0;
 
 static irqreturn_t phone_active_irq_handler(int irq, void *dev_id)
 {
-	if (gpio_get_value(OMAP3430_GPIO_PHONE_ACTIVE18))
+	if (gpio_get_value(OMAP_GPIO_PHONE_ACTIVE))
 		curr_phone_state = 2;
 	else
 		curr_phone_state = 1;
@@ -1495,13 +1698,13 @@ static int register_interrupt_handler(void)
 	unsigned int dpram_irq, phone_active_irq;
 	int retval = 0;
 
-	dpram_irq = OMAP_GPIO_IRQ(OMAP3430_GPIO_nDPRAM_INT);
-	phone_active_irq = OMAP_GPIO_IRQ(OMAP3430_GPIO_PHONE_ACTIVE18);
+	dpram_irq = OMAP_GPIO_IRQ(OMAP_GPIO_INT_ONEDRAM_AP);
+	phone_active_irq = OMAP_GPIO_IRQ(OMAP_GPIO_PHONE_ACTIVE);
 
 	dpram_clear();
 
-	set_irq_type(OMAP_GPIO_IRQ(OMAP3430_GPIO_PHONE_ACTIVE18), IRQ_TYPE_EDGE_BOTH);
-	set_irq_type(OMAP_GPIO_IRQ(OMAP3430_GPIO_nDPRAM_INT), IRQ_TYPE_LEVEL_LOW);
+	set_irq_type(OMAP_GPIO_IRQ(OMAP_GPIO_PHONE_ACTIVE), IRQ_TYPE_EDGE_BOTH);
+	set_irq_type(OMAP_GPIO_IRQ(OMAP_GPIO_INT_ONEDRAM_AP), IRQ_TYPE_LEVEL_LOW);
 
 	retval = request_irq(dpram_irq, dpram_interrupt, IRQF_DISABLED, DRIVER_NAME, NULL);
 
@@ -1527,11 +1730,11 @@ static void check_miss_interrupt(void)
 {
 	unsigned long flags;
 
-	if (gpio_get_value(OMAP3430_GPIO_PHONE_ACTIVE18) && !gpio_get_value(OMAP3430_GPIO_nDPRAM_INT)) {
+	if (gpio_get_value(OMAP_GPIO_PHONE_ACTIVE) && !gpio_get_value(OMAP_GPIO_INT_ONEDRAM_AP)) {
 		dprintk("there is a missed interrupt. try to read it!\n");
 
 		local_irq_save(flags);
-		dpram_interrupt(OMAP_GPIO_IRQ(OMAP3430_GPIO_nDPRAM_INT), NULL);
+		dpram_interrupt(OMAP_GPIO_IRQ(OMAP_GPIO_INT_ONEDRAM_AP), NULL);
 		local_irq_restore(flags);
 	}
 
@@ -1556,7 +1759,7 @@ void enable_dpram_pins(void)
 
 	/*PDA ACTIVE*/
 	if(gpio_request(OMAP_GPIO_PDA_ACTIVE, "OMAP_GPIO_PDA_ACTIVE") < 0 ){
-    		printk(KERN_ERR"\n FAILED TO REQUEST GPIO %d \n",OMAP_GPIO_PDA_ACTIVE);
+    		printk(KERN_ERR "\n FAILED TO REQUEST GPIO %d \n",OMAP_GPIO_PDA_ACTIVE);
     		return;
   	}
 		
@@ -1588,10 +1791,10 @@ void enable_dpram_pins(void)
 		return;
 	}
 
-	ret = gpio_request( OMAP3430_GPIO_ALARM_AP, "OMAP3430_GPIO_ALARM_AP");
+	ret = gpio_request( OMAP_GPIO_AP_ALARM, "OMAP_GPIO_AP_ALARM");
 	if (ret < 0)
 	{
-		printk( "fail to get gpio : %d, res : %d\n", OMAP3430_GPIO_ALARM_AP, ret );
+		printk( "fail to get gpio : %d, res : %d\n", OMAP_GPIO_AP_ALARM, ret );
 		//return;
 	}
 	
@@ -1600,10 +1803,19 @@ void enable_dpram_pins(void)
 	gpio_direction_input( OMAP_GPIO_INT_ONEDRAM_AP );
 	gpio_direction_output( OMAP_GPIO_FONE_ON, 0 );
 	gpio_direction_output( OMAP_GPIO_MSM_RST18_N, 0 );
-	gpio_direction_input(OMAP3430_GPIO_ALARM_AP);
+	gpio_direction_input(OMAP_GPIO_AP_ALARM);
 
 	return;
 }
+void disable_dpram_pins(void)
+{
+	gpio_free( OMAP_GPIO_PDA_ACTIVE );
+	gpio_free( OMAP_GPIO_PHONE_ACTIVE );
+	gpio_free( OMAP_GPIO_INT_ONEDRAM_AP );
+	gpio_free( OMAP_GPIO_FONE_ON );
+	gpio_free( OMAP_GPIO_MSM_RST18_N );
+    gpio_free( OMAP_GPIO_AP_ALARM );
+}
 
 static int dpram_shared_bank_remap(void)
 {
@@ -1670,7 +1882,7 @@ void dpram_forced_phoneoff(void)
 	u8 buf[12] = {0x7F, 0x0A, 0x00, 0x50, 0x07, 0x00, 0xFF, 0x00, 0x01, 0x02, 0x01, 0x7E};
 	dpram_write(device, buf, 12);
 
-	if(gpio_get_value(OMAP3430_GPIO_PHONE_ACTIVE18)){
+	if(gpio_get_value(OMAP_GPIO_PHONE_ACTIVE)){
 		WRITE_TO_DPRAM(DPRAM_PDA2PHONE_INTERRUPT_ADDRESS, &phone_off, DPRAM_INTERRUPT_PORT_SIZE);
 		printk(KERN_ERR "[dpram] forced phone power off called.\n");
 	}
@@ -1684,15 +1896,16 @@ static int __devexit dpram_remove(struct platform_device *dev)
 	unregister_dpram_err_device();
 #endif
 
-	free_irq(OMAP_GPIO_IRQ(OMAP3430_GPIO_nDPRAM_INT), NULL);
-	free_irq(OMAP_GPIO_IRQ(OMAP3430_GPIO_PHONE_ACTIVE18), NULL);
+	free_irq(OMAP_GPIO_IRQ(OMAP_GPIO_INT_ONEDRAM_AP), NULL);
+	free_irq(OMAP_GPIO_IRQ(OMAP_GPIO_PHONE_ACTIVE), NULL);
 
 	kill_tasklets();
 	
-	//gpio_free( OMAP_GPIO_PHONE_ACTIVE );
-	//gpio_free( OMAP_GPIO_INT_ONEDRAM_AP );
-	//gpio_free( OMAP_GPIO_FONE_ON );
-	//gpio_free( OMAP_GPIO_MSM_RST18_N );
+    remove_proc_entry(DRIVER_PROC_ENTRY, NULL);
+
+    // can't disable, pins needed in power down sequence
+    // -> todo move enable_dpram_pins to boardfile
+    //disable_dpram_pins();
 
 	return 0;
 }
